// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sparsh;

#nullable disable

namespace Sparsh.Migrations
{
    [DbContext(typeof(SparshDbContext))]
    [Migration("20221108142335_DBupdate")]
    partial class DBupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sparsh.Models.Database.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<double>("CartTotal")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<double>("PricePerProduct")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockId"));

                    b.Property<int?>("ItemProductId")
                        .HasColumnType("integer");

                    b.Property<long>("StockQuantity")
                        .HasColumnType("bigint");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.HasKey("StockId");

                    b.HasIndex("ItemProductId");

                    b.HasIndex("StorehouseId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Storehouse", b =>
                {
                    b.Property<int>("StorehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StorehouseId"));

                    b.HasKey("StorehouseId");

                    b.ToTable("Storehouse");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<int?>("PurchaserUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double precision");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("PurchaserUserId");

                    b.HasIndex("StorehouseId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Sparsh.Models.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sparsh.Models.Database.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WishListId"));

                    b.Property<int?>("ItemProductId")
                        .HasColumnType("integer");

                    b.HasKey("WishListId");

                    b.HasIndex("ItemProductId");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Cart", b =>
                {
                    b.HasOne("Sparsh.Models.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Sparsh.Models.Database.Transaction", null)
                        .WithMany("DescriptionOfGoods")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Stock", b =>
                {
                    b.HasOne("Sparsh.Models.Database.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemProductId");

                    b.HasOne("Sparsh.Models.Database.Storehouse", null)
                        .WithMany("Items")
                        .HasForeignKey("StorehouseId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Transaction", b =>
                {
                    b.HasOne("Sparsh.Models.Database.User", "Purchaser")
                        .WithMany()
                        .HasForeignKey("PurchaserUserId");

                    b.HasOne("Sparsh.Models.Database.Storehouse", null)
                        .WithMany("transactions")
                        .HasForeignKey("StorehouseId");

                    b.Navigation("Purchaser");
                });

            modelBuilder.Entity("Sparsh.Models.Database.WishList", b =>
                {
                    b.HasOne("Sparsh.Models.Database.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemProductId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Storehouse", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Sparsh.Models.Database.Transaction", b =>
                {
                    b.Navigation("DescriptionOfGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
